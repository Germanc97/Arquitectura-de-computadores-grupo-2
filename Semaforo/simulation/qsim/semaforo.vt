// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/18/2018 20:27:04"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    semaforo
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module semaforo_vlg_sample_tst(
	carro,
	clock,
	timer,
	sampler_tx
);
input  carro;
input  clock;
input  timer;
output sampler_tx;

reg sample;
time current_time;
always @(carro or clock or timer)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module semaforo_vlg_check_tst (
	act_temporizador,
	avenida,
	camino,
	sampler_rx
);
input  act_temporizador;
input  avenida;
input  camino;
input sampler_rx;

reg  act_temporizador_expected;
reg  avenida_expected;
reg  camino_expected;

reg  act_temporizador_prev;
reg  avenida_prev;
reg  camino_prev;

reg  act_temporizador_expected_prev;
reg  avenida_expected_prev;
reg  camino_expected_prev;

reg  last_act_temporizador_exp;
reg  last_avenida_exp;
reg  last_camino_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	act_temporizador_prev = act_temporizador;
	avenida_prev = avenida;
	camino_prev = camino;
end

// update expected /o prevs

always @(trigger)
begin
	act_temporizador_expected_prev = act_temporizador_expected;
	avenida_expected_prev = avenida_expected;
	camino_expected_prev = camino_expected;
end



// expected act_temporizador
initial
begin
	act_temporizador_expected = 1'bX;
end 

// expected avenida
initial
begin
	avenida_expected = 1'bX;
end 

// expected camino
initial
begin
	camino_expected = 1'bX;
end 
// generate trigger
always @(act_temporizador_expected or act_temporizador or avenida_expected or avenida or camino_expected or camino)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected act_temporizador = %b | expected avenida = %b | expected camino = %b | ",act_temporizador_expected_prev,avenida_expected_prev,camino_expected_prev);
	$display("| real act_temporizador = %b | real avenida = %b | real camino = %b | ",act_temporizador_prev,avenida_prev,camino_prev);
`endif
	if (
		( act_temporizador_expected_prev !== 1'bx ) && ( act_temporizador_prev !== act_temporizador_expected_prev )
		&& ((act_temporizador_expected_prev !== last_act_temporizador_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port act_temporizador :: @time = %t",  $realtime);
		$display ("     Expected value = %b", act_temporizador_expected_prev);
		$display ("     Real value = %b", act_temporizador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_act_temporizador_exp = act_temporizador_expected_prev;
	end
	if (
		( avenida_expected_prev !== 1'bx ) && ( avenida_prev !== avenida_expected_prev )
		&& ((avenida_expected_prev !== last_avenida_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port avenida :: @time = %t",  $realtime);
		$display ("     Expected value = %b", avenida_expected_prev);
		$display ("     Real value = %b", avenida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_avenida_exp = avenida_expected_prev;
	end
	if (
		( camino_expected_prev !== 1'bx ) && ( camino_prev !== camino_expected_prev )
		&& ((camino_expected_prev !== last_camino_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port camino :: @time = %t",  $realtime);
		$display ("     Expected value = %b", camino_expected_prev);
		$display ("     Real value = %b", camino_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_camino_exp = camino_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module semaforo_vlg_vec_tst();
// constants                                           
// general purpose registers
reg carro;
reg clock;
reg timer;
// wires                                               
wire act_temporizador;
wire avenida;
wire camino;

wire sampler;                             

// assign statements (if any)                          
semaforo i1 (
// port map - connection between master ports and signals/registers   
	.act_temporizador(act_temporizador),
	.avenida(avenida),
	.camino(camino),
	.carro(carro),
	.clock(clock),
	.timer(timer)
);

// carro
initial
begin
	repeat(2)
	begin
		carro = 1'b0;
		carro = #200000 1'b1;
		# 200000;
	end
	carro = 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

// timer
always
begin
	timer = 1'b0;
	timer = #500000 1'b1;
	#500000;
end 

semaforo_vlg_sample_tst tb_sample (
	.carro(carro),
	.clock(clock),
	.timer(timer),
	.sampler_tx(sampler)
);

semaforo_vlg_check_tst tb_out(
	.act_temporizador(act_temporizador),
	.avenida(avenida),
	.camino(camino),
	.sampler_rx(sampler)
);
endmodule

