// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/13/2018 23:07:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Compare_add_circuit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Compare_add_circuit_vlg_sample_tst(
	c,
	Num1,
	Num2,
	sa,
	sb,
	sampler_tx
);
input [2:0] c;
input [31:0] Num1;
input [31:0] Num2;
input [2:0] sa;
input [2:0] sb;
output sampler_tx;

reg sample;
time current_time;
always @(c or Num1 or Num2 or sa or sb)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Compare_add_circuit_vlg_check_tst (
	c,
	sa,
	salidaComp,
	salidadSum,
	sb,
	sampler_rx
);
input [2:0] c;
input [2:0] sa;
input  salidaComp;
input [3:0] salidadSum;
input [2:0] sb;
input sampler_rx;

reg [2:0] c_expected;
reg [2:0] sa_expected;
reg  salidaComp_expected;
reg [3:0] salidadSum_expected;
reg [2:0] sb_expected;

reg [2:0] c_prev;
reg [2:0] sa_prev;
reg  salidaComp_prev;
reg [3:0] salidadSum_prev;
reg [2:0] sb_prev;

reg [2:0] c_expected_prev;
reg [2:0] sa_expected_prev;
reg  salidaComp_expected_prev;
reg [3:0] salidadSum_expected_prev;
reg [2:0] sb_expected_prev;

reg [2:0] last_c_exp;
reg [2:0] last_sa_exp;
reg  last_salidaComp_exp;
reg [3:0] last_salidadSum_exp;
reg [2:0] last_sb_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	c_prev = c;
	sa_prev = sa;
	salidaComp_prev = salidaComp;
	salidadSum_prev = salidadSum;
	sb_prev = sb;
end

// update expected /o prevs

always @(trigger)
begin
	c_expected_prev = c_expected;
	sa_expected_prev = sa_expected;
	salidaComp_expected_prev = salidaComp_expected;
	salidadSum_expected_prev = salidadSum_expected;
	sb_expected_prev = sb_expected;
end



// expected salidaComp
initial
begin
	salidaComp_expected = 1'bX;
end 
// expected salidadSum[ 3 ]
initial
begin
	salidadSum_expected[3] = 1'bX;
end 
// expected salidadSum[ 2 ]
initial
begin
	salidadSum_expected[2] = 1'bX;
end 
// expected salidadSum[ 1 ]
initial
begin
	salidadSum_expected[1] = 1'bX;
end 
// expected salidadSum[ 0 ]
initial
begin
	salidadSum_expected[0] = 1'bX;
end 
// generate trigger
always @(c_expected or c or sa_expected or sa or salidaComp_expected or salidaComp or salidadSum_expected or salidadSum or sb_expected or sb)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected c = %b | expected sa = %b | expected salidaComp = %b | expected salidadSum = %b | expected sb = %b | ",c_expected_prev,sa_expected_prev,salidaComp_expected_prev,salidadSum_expected_prev,sb_expected_prev);
	$display("| real c = %b | real sa = %b | real salidaComp = %b | real salidadSum = %b | real sb = %b | ",c_prev,sa_prev,salidaComp_prev,salidadSum_prev,sb_prev);
`endif
	if (
		( c_expected_prev[0] !== 1'bx ) && ( c_prev[0] !== c_expected_prev[0] )
		&& ((c_expected_prev[0] !== last_c_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[0] = c_expected_prev[0];
	end
	if (
		( c_expected_prev[1] !== 1'bx ) && ( c_prev[1] !== c_expected_prev[1] )
		&& ((c_expected_prev[1] !== last_c_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[1] = c_expected_prev[1];
	end
	if (
		( c_expected_prev[2] !== 1'bx ) && ( c_prev[2] !== c_expected_prev[2] )
		&& ((c_expected_prev[2] !== last_c_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_exp[2] = c_expected_prev[2];
	end
	if (
		( sa_expected_prev[0] !== 1'bx ) && ( sa_prev[0] !== sa_expected_prev[0] )
		&& ((sa_expected_prev[0] !== last_sa_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sa[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sa_expected_prev);
		$display ("     Real value = %b", sa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sa_exp[0] = sa_expected_prev[0];
	end
	if (
		( sa_expected_prev[1] !== 1'bx ) && ( sa_prev[1] !== sa_expected_prev[1] )
		&& ((sa_expected_prev[1] !== last_sa_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sa[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sa_expected_prev);
		$display ("     Real value = %b", sa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sa_exp[1] = sa_expected_prev[1];
	end
	if (
		( sa_expected_prev[2] !== 1'bx ) && ( sa_prev[2] !== sa_expected_prev[2] )
		&& ((sa_expected_prev[2] !== last_sa_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sa[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sa_expected_prev);
		$display ("     Real value = %b", sa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sa_exp[2] = sa_expected_prev[2];
	end
	if (
		( salidaComp_expected_prev !== 1'bx ) && ( salidaComp_prev !== salidaComp_expected_prev )
		&& ((salidaComp_expected_prev !== last_salidaComp_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port salidaComp :: @time = %t",  $realtime);
		$display ("     Expected value = %b", salidaComp_expected_prev);
		$display ("     Real value = %b", salidaComp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_salidaComp_exp = salidaComp_expected_prev;
	end
	if (
		( salidadSum_expected_prev[0] !== 1'bx ) && ( salidadSum_prev[0] !== salidadSum_expected_prev[0] )
		&& ((salidadSum_expected_prev[0] !== last_salidadSum_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port salidadSum[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", salidadSum_expected_prev);
		$display ("     Real value = %b", salidadSum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_salidadSum_exp[0] = salidadSum_expected_prev[0];
	end
	if (
		( salidadSum_expected_prev[1] !== 1'bx ) && ( salidadSum_prev[1] !== salidadSum_expected_prev[1] )
		&& ((salidadSum_expected_prev[1] !== last_salidadSum_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port salidadSum[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", salidadSum_expected_prev);
		$display ("     Real value = %b", salidadSum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_salidadSum_exp[1] = salidadSum_expected_prev[1];
	end
	if (
		( salidadSum_expected_prev[2] !== 1'bx ) && ( salidadSum_prev[2] !== salidadSum_expected_prev[2] )
		&& ((salidadSum_expected_prev[2] !== last_salidadSum_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port salidadSum[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", salidadSum_expected_prev);
		$display ("     Real value = %b", salidadSum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_salidadSum_exp[2] = salidadSum_expected_prev[2];
	end
	if (
		( salidadSum_expected_prev[3] !== 1'bx ) && ( salidadSum_prev[3] !== salidadSum_expected_prev[3] )
		&& ((salidadSum_expected_prev[3] !== last_salidadSum_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port salidadSum[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", salidadSum_expected_prev);
		$display ("     Real value = %b", salidadSum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_salidadSum_exp[3] = salidadSum_expected_prev[3];
	end
	if (
		( sb_expected_prev[0] !== 1'bx ) && ( sb_prev[0] !== sb_expected_prev[0] )
		&& ((sb_expected_prev[0] !== last_sb_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sb_exp[0] = sb_expected_prev[0];
	end
	if (
		( sb_expected_prev[1] !== 1'bx ) && ( sb_prev[1] !== sb_expected_prev[1] )
		&& ((sb_expected_prev[1] !== last_sb_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sb_exp[1] = sb_expected_prev[1];
	end
	if (
		( sb_expected_prev[2] !== 1'bx ) && ( sb_prev[2] !== sb_expected_prev[2] )
		&& ((sb_expected_prev[2] !== last_sb_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sb_exp[2] = sb_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Compare_add_circuit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] treg_c;
reg [31:0] Num1;
reg [31:0] Num2;
reg [2:0] treg_sa;
reg [2:0] treg_sb;
// wires                                               
wire [2:0] c;
wire [2:0] sa;
wire salidaComp;
wire [3:0] salidadSum;
wire [2:0] sb;

wire sampler;                             

// assign statements (if any)                          
assign c = treg_c;
assign sa = treg_sa;
assign sb = treg_sb;
Compare_add_circuit i1 (
// port map - connection between master ports and signals/registers   
	.c(c),
	.Num1(Num1),
	.Num2(Num2),
	.sa(sa),
	.salidaComp(salidaComp),
	.salidadSum(salidadSum),
	.sb(sb)
);
// c[ 2 ]
initial
begin
	treg_c[2] = 1'bZ;
end 
// c[ 1 ]
initial
begin
	treg_c[1] = 1'bZ;
end 
// c[ 0 ]
initial
begin
	treg_c[0] = 1'bZ;
end 
// Num1[ 31 ]
initial
begin
	Num1[31] = 1'b0;
end 
// Num1[ 30 ]
initial
begin
	Num1[30] = 1'b0;
end 
// Num1[ 29 ]
initial
begin
	Num1[29] = 1'b0;
end 
// Num1[ 28 ]
initial
begin
	Num1[28] = 1'b0;
end 
// Num1[ 27 ]
initial
begin
	Num1[27] = 1'b0;
end 
// Num1[ 26 ]
initial
begin
	Num1[26] = 1'b0;
end 
// Num1[ 25 ]
initial
begin
	Num1[25] = 1'b0;
end 
// Num1[ 24 ]
initial
begin
	Num1[24] = 1'b0;
end 
// Num1[ 23 ]
initial
begin
	Num1[23] = 1'b0;
end 
// Num1[ 22 ]
initial
begin
	Num1[22] = 1'b0;
end 
// Num1[ 21 ]
initial
begin
	Num1[21] = 1'b0;
end 
// Num1[ 20 ]
initial
begin
	Num1[20] = 1'b0;
end 
// Num1[ 19 ]
initial
begin
	Num1[19] = 1'b0;
end 
// Num1[ 18 ]
initial
begin
	Num1[18] = 1'b0;
end 
// Num1[ 17 ]
initial
begin
	Num1[17] = 1'b0;
end 
// Num1[ 16 ]
initial
begin
	Num1[16] = 1'b0;
end 
// Num1[ 15 ]
initial
begin
	Num1[15] = 1'b0;
end 
// Num1[ 14 ]
initial
begin
	Num1[14] = 1'b0;
end 
// Num1[ 13 ]
initial
begin
	Num1[13] = 1'b0;
end 
// Num1[ 12 ]
initial
begin
	Num1[12] = 1'b0;
end 
// Num1[ 11 ]
initial
begin
	Num1[11] = 1'b0;
end 
// Num1[ 10 ]
initial
begin
	Num1[10] = 1'b0;
end 
// Num1[ 9 ]
initial
begin
	Num1[9] = 1'b0;
end 
// Num1[ 8 ]
initial
begin
	Num1[8] = 1'b0;
end 
// Num1[ 7 ]
initial
begin
	Num1[7] = 1'b0;
end 
// Num1[ 6 ]
initial
begin
	Num1[6] = 1'b0;
end 
// Num1[ 5 ]
initial
begin
	Num1[5] = 1'b0;
end 
// Num1[ 4 ]
initial
begin
	Num1[4] = 1'b0;
end 
// Num1[ 3 ]
initial
begin
	Num1[3] = 1'b0;
end 
// Num1[ 2 ]
initial
begin
	Num1[2] = 1'b0;
end 
// Num1[ 1 ]
initial
begin
	Num1[1] = 1'b0;
end 
// Num1[ 0 ]
initial
begin
	Num1[0] = 1'b0;
end 
// Num2[ 31 ]
initial
begin
	Num2[31] = 1'b0;
end 
// Num2[ 30 ]
initial
begin
	Num2[30] = 1'b0;
end 
// Num2[ 29 ]
initial
begin
	Num2[29] = 1'b0;
end 
// Num2[ 28 ]
initial
begin
	Num2[28] = 1'b0;
end 
// Num2[ 27 ]
initial
begin
	Num2[27] = 1'b0;
end 
// Num2[ 26 ]
initial
begin
	Num2[26] = 1'b0;
end 
// Num2[ 25 ]
initial
begin
	Num2[25] = 1'b0;
end 
// Num2[ 24 ]
initial
begin
	Num2[24] = 1'b0;
end 
// Num2[ 23 ]
initial
begin
	Num2[23] = 1'b0;
end 
// Num2[ 22 ]
initial
begin
	Num2[22] = 1'b0;
end 
// Num2[ 21 ]
initial
begin
	Num2[21] = 1'b0;
end 
// Num2[ 20 ]
initial
begin
	Num2[20] = 1'b0;
end 
// Num2[ 19 ]
initial
begin
	Num2[19] = 1'b0;
end 
// Num2[ 18 ]
initial
begin
	Num2[18] = 1'b0;
end 
// Num2[ 17 ]
initial
begin
	Num2[17] = 1'b0;
end 
// Num2[ 16 ]
initial
begin
	Num2[16] = 1'b0;
end 
// Num2[ 15 ]
initial
begin
	Num2[15] = 1'b0;
end 
// Num2[ 14 ]
initial
begin
	Num2[14] = 1'b0;
end 
// Num2[ 13 ]
initial
begin
	Num2[13] = 1'b0;
end 
// Num2[ 12 ]
initial
begin
	Num2[12] = 1'b0;
end 
// Num2[ 11 ]
initial
begin
	Num2[11] = 1'b0;
end 
// Num2[ 10 ]
initial
begin
	Num2[10] = 1'b0;
end 
// Num2[ 9 ]
initial
begin
	Num2[9] = 1'b0;
end 
// Num2[ 8 ]
initial
begin
	Num2[8] = 1'b0;
end 
// Num2[ 7 ]
initial
begin
	Num2[7] = 1'b0;
end 
// Num2[ 6 ]
initial
begin
	Num2[6] = 1'b0;
end 
// Num2[ 5 ]
initial
begin
	Num2[5] = 1'b0;
end 
// Num2[ 4 ]
initial
begin
	Num2[4] = 1'b0;
end 
// Num2[ 3 ]
initial
begin
	Num2[3] = 1'b0;
end 
// Num2[ 2 ]
initial
begin
	Num2[2] = 1'b0;
end 
// Num2[ 1 ]
initial
begin
	Num2[1] = 1'b0;
end 
// Num2[ 0 ]
initial
begin
	Num2[0] = 1'b0;
end 
// sa[ 2 ]
initial
begin
	treg_sa[2] = 1'b1;
	# 40000;
	repeat(6)
	begin
		treg_sa[2] = 1'b0;
		treg_sa[2] = #80000 1'b1;
		# 80000;
	end
end 
// sa[ 1 ]
initial
begin
	repeat(12)
	begin
		treg_sa[1] = 1'b1;
		treg_sa[1] = #40000 1'b0;
		# 40000;
	end
	treg_sa[1] = 1'b1;
end 
// sa[ 0 ]
always
begin
	treg_sa[0] = 1'b0;
	treg_sa[0] = #20000 1'b1;
	#20000;
end 
// sb[ 2 ]
initial
begin
	treg_sb[2] = 1'b0;
	# 20000;
	repeat(6)
	begin
		treg_sb[2] = 1'b1;
		treg_sb[2] = #80000 1'b0;
		# 80000;
	end
	treg_sb[2] = 1'b1;
end 
// sb[ 1 ]
initial
begin
	treg_sb[1] = 1'b1;
	# 20000;
	repeat(12)
	begin
		treg_sb[1] = 1'b0;
		treg_sb[1] = #40000 1'b1;
		# 40000;
	end
	treg_sb[1] = 1'b0;
end 
// sb[ 0 ]
always
begin
	treg_sb[0] = 1'b1;
	treg_sb[0] = #20000 1'b0;
	#20000;
end 

Compare_add_circuit_vlg_sample_tst tb_sample (
	.c(c),
	.Num1(Num1),
	.Num2(Num2),
	.sa(sa),
	.sb(sb),
	.sampler_tx(sampler)
);

Compare_add_circuit_vlg_check_tst tb_out(
	.c(c),
	.sa(sa),
	.salidaComp(salidaComp),
	.salidadSum(salidadSum),
	.sb(sb),
	.sampler_rx(sampler)
);
endmodule

